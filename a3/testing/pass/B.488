% Assignment 1 part B
% A program using arrays including both forms of array declaration, positive and negativebounds.

begin
    % Single integer bound declaration
    integer array1[4]
    integer array2[2..5], array3[-3..1]
    integer array4[5]
    integer i
    integer arrayEntry
    
    array1[1] := 1
    array1[2] := 1
    array1[3] := 2
    array1[4] := 3
    
    put "array1 index 1: ", array1[1], skip
    put "array1 index 2: ", array1[2], skip
    put "array1 index 3: ", array1[3], skip
    put "array1 index 4: ", array1[4], skip
    put skip
    
    % Integer pair bound declaration
    array2[2] := 5
    array2[3] := 8
    array2[4] := 13
    array2[5] := 21
    
    array3[-3] := 34
    array3[-2] := 55
    array3[-1] := 89
    array3[0] := 144
    array3[1] := 233
    
    put "array2 index 2 (first index): ", array2[2], skip
    put "array2 index 3 (second index):", array2[3], skip
    put "array2 index 4 (third index):", array2[4], skip
    put "array2 index 5 (fourth index):", array2[5], skip
    
    put "array3 index -3 (first index): ", array3[-3], skip
    put "array3 index -2 (second index): ", array3[-2], skip
    put "array3 index -1 (third index): ", array3[-1], skip
    put "array3 index 0 (fourth index): ", array3[0], skip
    put "array3 index 1 (fifth index): ", array3[1], skip
    put skip
    
    % Array creation through input
    i := 0
    loop
        i := i + 1
        
        put "Next array value? (integer):", skip
        get arrayEntry
        array4[i] := arrayEntry
        
        exit when (i = 5)
    pool
    put skip
    
    i := 0
    loop
        i := i + 1
        
        put "array4 index ", i, ": ", array4[i], skip
        
        exit when (i = 5)
    pool
    
end
