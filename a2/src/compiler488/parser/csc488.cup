//
// Package and import specifications section.

package compiler488.parser;

import java_cup.runtime.*;        // Must always import this.

/* User code components 1: action code components.
 * Code to be used inside the actions triggered when productions are matched.
 * If any common code is needed for more than one action , put it here.
 */
// action code {:
// your code goes HERE
//:};

/* User code components 2: parser code components. 
 * Modifications to the default generated parser
 */
parser code {:

    String lastError;
    
    /** Override the report_error method so it will display the line and
     * column of where the error occurred in the input as well as the
     * reason for the error which is passed into the method in the
     * String 'message'.
     * @param message  error message to print
     * @param info     symbol containing line/column numbers
     */
    public void report_error(String message, Object info)
    {
    String st =  "Error";
   
        if (info instanceof java_cup.runtime.Symbol)
        {
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);

        /* s.left is supposed to hold the line number of the error.
         * s.right is supposed to hold the column number.
             * If either is < 0 the parser may have run off the end of the program
             * and a Syntax Error message without line number may be printed.
         */
   
            if (s.left >= 0)                // Check line number.
        {
                st += " in line " + (s.left + 1);
                if (s.right >= 0)            // Check column number.
                    st += ", column " + (s.right + 1);
        }
            else
               st += " at end of input " ;
           }
        st += ": " + message;
        System.err.println (st);
        lastError = st;
    }
   
    /** Override the report_fatal_error method to use the report_error method. */
    /** @throws SyntaxErrorException                        */
    public void report_fatal_error (String message, Object info) throws SyntaxErrorException
    {
        report_error (message, info);
/*        throw new SyntaxErrorException (lastError); */
    }
   
   /** version string for printing version in Main */
   public static final String version =
     " $Revision: 1.10 $ $Date: 2013/01/04 16:42:14 $Author: dw $" ;

:};

/* User code components 3: initialization code.
 * If you want some code to be executed before the parser asks for the first
 * token, add it here.
 */
init with {:
:};

/* User code components 4: scanner specification code.
 * If you need to override the way the parser asks the scanner for the
 * next token, put your preferred method here.  Uncomment the line following
 * this comment, replace the line after that with your code, and uncomment
 * the line after that.
 */
// scan with {:
// your code goes here
// :};

/* Symbol lists section.
 * The names of terminals and non-terminals are not allowed to be CUP
 * reserved words.  These include "code", "action", "parser", "terminal",
 * "non", "nonterminal", "init", "scan", "with", "start", "precedence",
 * "left", "right", "nonassoc", "import", and "package".
 */

// DEFINITIONS for CSC488S Source Language  Winter  2012/2013 

// Terminals returned by the scanner with no value attached.  
terminal     BOOLEAN,    INTEGER,    BEGIN        ;
terminal    ELSE,    END,    EXIT,   FI,    FORWARD    ;
terminal    IF,    GET,     LOOP,    POOL,    PROCEDURE,    PUT    ;
terminal    RESULT,    RETURN,    SKIP,    THEN,    WHEN    ;

// Special-character terminals, no value attached
terminal    AND,    OR,    NOT,    TRUE,    FALSE    ;
terminal    L_PAREN    ,R_PAREN,L_SQUARE, R_SQUARE     ;
terminal    EQUAL,    GREATER,LESS,    COMMA,  DOT, COLON    ;
terminal    PLUS,    MINUS,    TIMES,  DIVIDE    ;

// Terminals returned by the scanner with a value.
terminal String  IDENT    ;
terminal Integer INTCONST    ;
terminal String  TEXTCONST    ;

// Non-terminals that have no value.
// nonterminal xxx

nonterminal program;
nonterminal statement;
nonterminal statements;
nonterminal scope;
nonterminal declaration;
nonterminal declarations;
nonterminal functionHead;
nonterminal procedureHead;
nonterminal variabledecls;
nonterminal bound;

nonterminal type;
nonterminal output;
nonterminal outputs;
nonterminal input;

nonterminal argumentList;
nonterminal arguments;
nonterminal parameterList;
nonterminal parameters;
nonterminal variable;
nonterminal expression;

nonterminal variabledecl;
nonterminal arrayname;
nonterminal functionname;
nonterminal variablename;
nonterminal parametername;
nonterminal procedurename;

// Symbols not in the original grammar.
nonterminal and_op, not_op, compare_ops, add_minus, mult_divide, unary_not_minus, operand;

// Non-terminals that have a value.
// nonterminal type  nameList ;

// CSC488S PLEASE NOTE: your grammar CAN NOT use the 'precedence'
// feature of java-cup. The lines below should remain
// commented.
//
//precedence left PLUS, MINUS;
//precedence left TIMES, DIVIDE;        // Higher precedence.

// The grammar section.


// This specifies the initial symbol of the grammar.
start with program;

/* Notice that sometimes the action must be inside the production rule,
 * not after it.  This is a subtle yet significant difference from YACC.
 * This is because the CUP parser is looking ahead one token.  It ALWAYS
 * reads one more token before it will act on the production.
 */

program             ::= scope; // the main program

statements          ::= statement |
                        statements statement;

statement           ::= variable COLON EQUAL expression |
                        IF expression THEN statements FI |
                        IF expression THEN statements ELSE statements FI |
                        LOOP statements POOL |
                        EXIT |
                        EXIT INTCONST |
                        EXIT WHEN expression |
                        EXIT INTCONST WHEN expression |
                        RESULT expression |
                        RETURN |
                        PUT outputs |
                        GET input |
                        procedurename argumentList |
                        scope;

scope               ::= BEGIN declarations statements END |
                        BEGIN statements END;

declarations        ::= declaration |
                        declarations declaration;

declaration         ::= type variabledecls |
                        functionHead scope |
                        procedureHead scope |
                        FORWARD functionHead |
                        FORWARD procedureHead;
                        
functionHead        ::= type functionname parameterList;

procedureHead       ::= PROCEDURE procedurename parameterList;

variabledecls       ::= variabledecl |
                        variabledecls COMMA variabledecl;

variabledecl        ::= IDENT |
                        IDENT L_SQUARE INTCONST R_SQUARE |
                        IDENT L_SQUARE bound DOT DOT bound R_SQUARE;
                            
bound               ::= INTCONST |
                        MINUS INTCONST;

type                ::= INTEGER |
                        BOOLEAN;

outputs             ::= output |
                        outputs COMMA output;

output              ::= expression |
                        TEXTCONST |
                        SKIP;

input               ::= variable |
                        variable COMMA input;

argumentList        ::= L_PAREN arguments R_PAREN |
                        L_PAREN R_PAREN;

arguments           ::= expression |
                        arguments COMMA expression;

parameterList       ::= L_PAREN parameters R_PAREN |
                        L_PAREN R_PAREN;

parameters          ::= type parametername |
			            parameters COMMA type parametername;

variable            ::= variablename |
                        arrayname L_SQUARE expression R_SQUARE;

expression          ::= expression OR and_op |                  // binary OR operator
                        and_op;

/** Precedence group **/
and_op              ::= and_op AND not_op |                     // binary AND operator
                        not_op;

/** Precedence group **/
not_op              ::= NOT not_op |                       // not operator
                        compare_ops;

/** Precedence group **/
compare_ops         ::= compare_ops LESS add_minus |            // less than comparison
                        compare_ops LESS EQUAL add_minus |      // less than or equal comparison
                        compare_ops GREATER add_minus |         // greater than comparison
                        compare_ops GREATER EQUAL add_minus |   // greater than or equal comparison
                        compare_ops EQUAL add_minus |           // equality comparison
                        compare_ops NOT EQUAL add_minus |       // inequality comparison
                        add_minus;
    
/** Precedence group **/
add_minus           ::= add_minus PLUS mult_divide |            // addition
                        add_minus MINUS mult_divide |           // subtraction
                        mult_divide;
    
/** Precedence group **/
mult_divide         ::= mult_divide TIMES unary_not_minus |     // multiplication
                        mult_divide DIVIDE unary_not_minus |    // division
                        unary_not_minus;
    
/** Highest precedence group **/
unary_not_minus     ::= MINUS unary_not_minus |                         // unary minus
                        operand;
    
/** Stuff where precedence does not matter **/
operand             ::= INTCONST |
                        TRUE |                                  // Boolean constant true
                        FALSE |                                 // Boolean constant false
                        L_PAREN expression R_PAREN |
                        variable |                              // reference to variable
                        functionname argumentList;              // call of a function

variablename        ::= IDENT;
arrayname           ::= IDENT;
functionname        ::= IDENT;
parametername       ::= IDENT;
procedurename       ::= IDENT;
