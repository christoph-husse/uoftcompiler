% Update display of main program
PUSH addr		% TODO: fill with address of main block mark
SETD 0			% Update display[0]


% 3-5 P routine code
SETD 1			% Update display[1]
ADDR 1 3
SETD 0			% Update display[0]
% 3-8 P exit code
PUSH 2			% Pop e, f
POPN
ADDR 1 1		% Branch to return address
BR


% 3-11 F routine code
SETD 1			% Update display[1]
ADDR 1 3
SETD 0			% Update display[0]
% 3-13/3-14 F exit code
ADDR 1 0		% Get the return value placeholder address
ADDR 1 ON		% TODO: fill with offset of expression to return
LOAD
STORE
ADDR 1 1		% Branch to return address
BR


% 3-16 Q routine code
SETD 1			% Update display[1]
ADDR 1 3
SETD 0			% Update display[0]
% 3-25/3-26 Q exit code
PUSH 3			% Pop t, u, v
POPN
ADDR 1 1		% Branch to return address
BR
	

	% 3-19 G routine code
	PUSH addr		% TODO: fill with address of G's block mark
	SETD 2			% Update display[2]
	ADDR 2 3
	SETD 1			% Update display[1]
	ADDR 1 3
	SETD 0			% Update display[0]
	% 3-23 G exit code
	ADDR 1 0		% Get the return value placeholder address
	ADDR 1 ON		% TODO: fill with offset of expression to return
	LOAD
	STORE
	PUSH 2			% Pop w, x
	POPN
	ADDR 1 1		% Branch to return address
	BR


	% 3-25 G caller code
	PUSH 0			% Placeholder for return value
	PUSH addr		% TODO: fill with address of instruction after branch
	ADDR 1 0		% Dynamic link
	ADDR 0 0		% Static link
	ADDR 1 ON		% TODO: fill with offset of var a
	LOAD
	PUSH addr		% TODO: fill with address of G's block mark
	PUSH addr		% TODO: fill with address of G's first instruction
	BR				% Branch to G

	PUSH 4			% Pop parameter a plus activation record
	POPN
	PUSH addr		% TODO: fill with address of Q's block mark
	SETD 1			% Update display[1]
	ADDR 1 3
	SETD 0			% Update display[0]


	% 3-26 F caller code
	PUSH 0			% Placeholder for return value
	PUSH addr		% TODO: fill with address of instruction after branch
	ADDR 1 0		% Dynamic link
	ADDR 0 0		% Static link
	ADDR 1 ON		% TODO: fill with offset of var m
	LOAD
	ADDR 1 ON		% TODO: fill with offset of var n
	LOAD
	PUSH addr		% TODO: fill with address of F's block mark
	PUSH addr		% TODO: fill with address of F's first instruction
	BR				% Branch to F

	PUSH 5			% Pop parameters m, n plus activation record
	POPN
	PUSH addr		% TODO: fill with address of Q's block mark
	SETD 1			% Update display[1]
	ADDR 1 3
	SETD 0			% Update display[0]


	% 3-27 P caller code
	PUSH 0			% Placeholder for return value
	PUSH addr		% TODO: fill with address of instruction after branch
	ADDR 1 0		% Dynamic link
	ADDR 0 0		% Static link
	PUSH addr		% TODO: fill with address of P's block mark
	PUSH addr		% TODO: fill with address of P's first instruction
	BR				% Branch to P

	PUSH 4			% Pop activation record and return value placeholder
	POPN
	PUSH addr		% TODO: fill with address of Q's block mark
	SETD 1			% Update display[1]
	ADDR 1 3
	SETD 0			% Update display[0]


% 3-29 Q caller code
PUSH 0			% Placeholder for return value
PUSH addr		% TODO: fill with address of instruction after branch
ADDR 0 0		% Dynamic link
ADDR 0 0		% Static link
ADDR 0 ON		% TODO: fill with offset of var m
LOAD
ADDR 0 ON		% TODO: fill with offset of var n
LOAD
ADDR 0 ON		% TODO: fill with offset of var p
LOAD
PUSH addr		% TODO: fill with address of Q's block mark
PUSH addr		% TODO: fill with address of Q's first instruction
BR				% Branch to Q

PUSH 4			% Pop activation record and return value placeholder
POPN
PUSH addr		% TODO: fill with address of main block mark
SETD 0			% Update display[0]

